<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">

<!-- 	RequestMappingHandlerMapping -->
<!-- 	RequestMappingHandlerAdapter -->
<!-- 	InternalResourceViewResolver -->
<!--    DefaultMessageCodeResolver   -->
<!-- 	기본전략 수립  -->
<mvc:annotation-driven /> 

<!-- 정적요청 처리 -->
<mvc:default-servlet-handler/>

<!-- 정적요청 처리를 다른 방법으로 -->
<!-- <mvc:resources location="" mapping="" cache-period="0"></mvc:resources> -->

<!-- 하나의 영역을 지원하는 전략이 여러개 등록되는 경우 order를 통해 우선순위를 설정해야한다.  -->
<!-- 주의! org.springframework.web.servlet.view.InternalResourceViewResolver의 우선순위는 가장 낮게 설정 -->
<!-- order를 정하지 않을 경우 가장 마지막 -->
<bean id="IRVR" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
	p:prefix="/WEB-INF/views/" 	
	p:suffix=".jsp"/> 
	
<bean id="downloadView" class = "kr.or.ddit.attach.DownloadView"/>

<bean id="BNVR" class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="1"/>
<!-- 이미 스프링컨테이너 안에 등록되어있는 빈에서 찾는다 -->

<bean id="TVR" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" p:order="2"/>
<!-- <bean id="memberViewPreparer" class="kr.or.ddit.member.preparer.MemberViewPreparer"/> -->
<!-- 단점 일일이 등록하면 힘듬  -->

<!-- Tiles 등록 -->
<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer" 
p:definitions="classpath:kr/or/ddit/tiles/*.xml" 
p:preparerFactoryClass="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory"/>


<!-- <context:component-scan base-package="kr.or.ddit.*.controller" ></context:component-scan> -->
<context:component-scan base-package="kr.or.ddit" use-default-filters="false" >
	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	<context:include-filter type="annotation" expression="kr.or.ddit.common.annotation.Preparer"/>
</context:component-scan> 
<!-- 빈등록시 매핑도 같이 할려면 컨트롤러이어야한다. 7개중 다른 어노테이션은 핸들러매핑이 되지 않는다. -->
<!-- kr.or.ddit.common.validation.Preparer는 커스텀 어노테이션 memberViewPrepare에서 사용할려고 -->

<!-- <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" -->
<!-- 	p:basename="kr.or.ddit.msg.message"/> -->
	
<!-- 파일 업로드 처리를 위한 전략 등록 -->
<!-- 무조건 multipartResolve , 어댑터가 주입받기 때문-->
<!-- 서블릿 3.0이상에서만 사용가능 -> 내부적으로 part를 사용한다. -->
<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver"></bean> -->


<!-- 캐쉬를 안남기게 하는 법  -->
<bean id="webContentInterceptor" class="org.springframework.web.servlet.mvc.WebContentInterceptor"
	p:cacheSeconds="0"
	p:useCacheControlHeader="true"
	p:useCacheControlNoStore="true"
	p:useExpiresHeader="true"
/>

<bean id="loginInterceptor" class="kr.or.ddit.common.intecerptor.LoginInterceptor" />

<!-- p:cacheSeconds="0" 캐쉬를 남기지 마라  -->
<!-- default이긴 하지만 확실하게 다시 설정하기 위해 이하 설정을 적용-->
<!-- p:useCacheControlHeader="true" -->
<!-- p:useCacheControlNoStore="true" -->
<!-- p:useExpiresHeader="true" -->


<!-- 인터셉터를 등록-->
<!-- 필터는 컨테이너 바깥에서  -->
<!-- 인터셉터는 컨테이너 안에서 동작하는 필터 -->

<!--모든 요쳥에 대한 캐쉬 삭제 -->
<!-- <mvc:interceptors> -->
<!-- 	<ref bean="webContentInterceptor"/> -->
<!-- </mvc:interceptors> -->

<mvc:interceptors>
<!-- 부분적 캐쉬 삭제 -->
	<mvc:interceptor>
	<mvc:mapping path="/**/*.js"/> 
	<mvc:mapping path="/**/*.css"/>
	<mvc:mapping path="/**/*.html"/>
	<ref bean ="webContentInterceptor"/>
	</mvc:interceptor>
<!-- 로그인 interceptor -->	
	<mvc:interceptor>
		<mvc:mapping path="/**"/>
		<ref bean="loginInterceptor"/>
	</mvc:interceptor>
	
</mvc:interceptors>


<!-- <mvc:view-controller path="/noticeBoards" view-name="noticeBoards/noticeBoardList"/> -->
<!-- <mvc:view-controller path="/noticeBoards" view-name="noticeBoards/noticeBoardView"/> -->
<mvc:view-controller path="/naverLogin" view-name="naver/callback"/>

</beans>