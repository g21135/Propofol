<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

<!-- 1. Connection 생성에 사용할 DataSource 등록 -->

<!-- 빈등록과 똑같다 -->
<util:properties id="dbInfo" location="classpath:kr/or/ddit/db/dbInfo.properties"/>

<!-- id는 무조건 dataSource여야 한다. -->
<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" 
	p:driverClassName="#{dbInfo['driverClassName']}"
	p:url="#{dbInfo['url']}"
	p:username="#{dbInfo['username']}"
	p:password="#{dbInfo['password']}"
	p:initialSize="#{dbInfo['initSize']}"
	p:maxWaitMillis="#{dbInfo['maxWait']}"
	p:maxTotal="#{dbInfo['maxTotal']}"
/>	

<!-- platform vased transaction managing -->
<!-- 트랜잭션 관리를 위한 매니저 등록 -->
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
p:dataSource-ref="dataSource"/>

<!-- 
2. SqlSessionFactory를 생성하기 위한 전략 빈 등록 
3. mybatis 컨텍스트가 생성될 수 있는 환경
-->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"  
p:dataSource-ref="dataSource"
p:typeAliasesPackage="kr.or.ddit.vo"
p:mapperLocations="classpath:kr/or/ddit/mybatis/mappers/*.xml"
/>
<!-- scope singleTon -->
<!-- getObject로 반환되는 값SqlSessionFactory
 CustomSqlSessionFactoryBuilder 이역할을 대신해준다-->

<!-- 
4-1. DAO의 구현체를 직접 생성하고, 해당 DAO 에서 SqlSessionFactoryBean을 주입-->
<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> -->
<!--   <constructor-arg ref="sqlSessionFactory"/> -->
<!-- </bean> -->

<!--  
4-2. MybatisScanner를 활용하여 , DAO의 매퍼 프록시를 직접 생성하는 방식
	스캔의 대상이 되는 인터페이스에 @Repository를 사용하여 스캔될 수 있도록
 -->
<mybatis-spring:scan base-package="kr.or.ddit.*.dao"
	annotation="org.springframework.stereotype.Repository"
/>
<!-- 스프링 ORM 연동 -->
<!-- 인터페이스를 찾아서 구현체를 내부적으로 생성해준다. -->
<!-- annotation : 여기서 지정한 annotation이 있으면 수집하여 해당 인터페이스 프록시를 생성 (구현체)-->



</beans>
